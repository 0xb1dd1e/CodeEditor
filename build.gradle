
version = '0.2.0'

buildscript {
	repositories {
		ivy { url '../repository' }
		ivy { url 'http://unity-technologies.github.com/kaizen/repositories/unstable' }
		mavenCentral()
	}
	dependencies {
		classpath 'kaizen:kaizen:0.2.8'
	}
}

allprojects {
	apply plugin: 'vs2010'
}

/*
project(':CodeEditor.Text.UI.Unity.Editor') {
	vs {
		project {
			postBuildEvent {
				task ':updateUnityProject'
			}
		}
	}
}
*/

vs {
	solutions {

		def frameworkProjects = [
			':CodeEditor.Collections',
			':CodeEditor.Composition',
			':CodeEditor.IO',
			':CodeEditor.Testing',
			':CodeEditor.Composition.Client',
			':CodeEditor.Composition.Server'
		]
		def isTestProject = { p -> (p.name =~ /\.Tests(\.Fixtures)?/).any() }
		def testProjects = subprojects.findAll(isTestProject) .collect { it.path }
		def languageProjects = subprojects.findAll { it.name.contains('Languages') && !(it.path in testProjects) }.collect { it.path }
		def categorizedProjects = (frameworkProjects + testProjects + languageProjects).toSet()
		def remainingProjects = subprojects.collect { it.path }.findAll { !(it in categorizedProjects) }

		CodeEditor {
			folder('Frameworks') { f ->
				frameworkProjects.each {
					f.project(it)
				}
			}
			folder('Languages') { f ->
				languageProjects.each {
					f.project(it)
				}
			}
			folder('Tests') { f ->
				testProjects.each {
					f.project(it)
				}
			}
			remainingProjects.each {
				project(it)
			}
		}
	}
}

allprojects {
	repositories {
		ivy { url rootProject.file(rootProject.properties.rxRepository) }
		ivy { url 'http://unity-technologies.github.com/kaizen/repositories/unstable' }
	}
}

configurations {
	editor {
		description "Configuration for editor extension artifacts."
	}
	tests {
		description "Configuration for testing artifacts."
	}
}

apply plugin: 'kaizen-bundle'
apply plugin: 'nunit'
apply plugin: 'idea'

def bundleDependencies = project.dependencies
subprojects { subProject ->
	switch (subProject.name) {
	case ~/.+\.Tests$/:
		apply plugin: 'nunit-assembly'
		dependencies {
			// Foo.Bar.Tests depends on Foo.Bar
			'default' project(subProject.path[0..-('.Tests'.length() + 1)])
		}
		bundleDependencies.add('tests', bundleDependencies.project(path: subProject.path))
		break
	case ~/.+\.Testing$/:
		break
	default:
		bundleDependencies.add('editor', bundleDependencies.project(path: subProject.path))
	}
}

task publish {
	dependsOn uploadEditor
	project.configurations.editor.dependencies.each {
		dependsOn ":$it.name:uploadDefault" 
	}
}

def unityProjectDir = project.properties.get('unityProjectDir', 'UnityProject')

task updateUnityProject {

	description 'Builds and copies required assemblies to the configured Unity project (unityProjectDir)'

	def config = project.configurations.editor
	dependsOn config

	doFirst {
		def destinationDir = project.file("$unityProjectDir/Assets/kaizen/lib/Editor")

		logger.info("Updating $destinationDir")

		config.incoming.files.each { f ->
			project.copy {
				from project.zipTree(f)
				into destinationDir
				include '*.dll'
				exclude 'UnityE*'
			}
		}
	}
}

task open {
	dependsOn updateUnityProject
	doFirst {
		project.exec {
			executable rootProject.extensions.unity.executable
			args '-projectPath'
			args file(unityProjectDir)
		}
	}
}
nunit {
	version = '2.6+'
}

ext {
		references = [
			'nunitFramework': "nunit:nunit.framework:${nunit.version}",
			'moq': 'Moq:Moq:4.0+',
			'adt': 'boo-extensions:Boo.Adt:0.1.1+',
			'ometa': 'boo-extensions:Boo.OMeta:0.1.1+',
			'rx': { name -> "Rx:$name:1.0.2856.0" }
		]
}

